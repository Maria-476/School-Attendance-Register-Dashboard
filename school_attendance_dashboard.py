import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
from io import BytesIO

# ------------------------------------
# 🎓 Title and Description
# ------------------------------------
st.set_page_config(page_title="School Attendance Dashboard", layout="wide")
st.title("📊 School Attendance Register Dashboard Generated By Maria Anwar")
st.markdown("Easily upload daily Excel attendance data and visualize insights in real-time.")

# ------------------------------------
# 📂 Upload or Load Data
# ------------------------------------
st.sidebar.header("📤 Upload Excel File")

uploaded_file = st.sidebar.file_uploader("school_attendance_checked_data", type=["xlsx"])

@st.cache_data
def load_data(file):
    if file is not None:
        df = pd.read_excel(file)
    else:
        # Fallback: load sample CSV (default data)
        df = pd.read_csv("school_attendance_checked_data.csv")
    return df

df = load_data(uploaded_file)

# ------------------------------------
# 🗓️ Show last updated time
# ------------------------------------
st.sidebar.write("🕒 Last updated:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

# ------------------------------------
# 🔍 Sidebar Filters
# ------------------------------------
st.sidebar.header("🔍 Filter Data")

grades = st.sidebar.multiselect(
    "Select Grade(s):",
    options=df["Grade"].unique(),
    default=df["Grade"].unique()
)

months = st.sidebar.multiselect(
    "Select Month(s):",
    options=df["Month"].unique(),
    default=df["Month"].unique()
)

filtered_df = df[(df["Grade"].isin(grades)) & (df["Month"].isin(months))]

if filtered_df.empty:
    st.warning("⚠️ No data available for the selected filters.")
    st.stop()

# ------------------------------------
# 📈 KPI Section
# ------------------------------------
avg_attendance = filtered_df["Attendance_%"].mean()
total_students = filtered_df["Std_Name"].nunique()
total_records = len(filtered_df)

col1, col2, col3 = st.columns(3)
col1.metric("📅 Average Attendance (%)", f"{avg_attendance:.2f}")
col2.metric("👩‍🎓 Unique Students", total_students)
col3.metric("🧾 Total Records", total_records)

# ------------------------------------
# 📊 Attendance by Grade
# ------------------------------------
st.subheader("🎯 Average Attendance by Grade")
grade_chart = px.bar(
    filtered_df.groupby("Grade")["Attendance_%"].mean().reset_index(),
    x="Grade",
    y="Attendance_%",
    color="Grade",
    title="Average Attendance by Grade",
)
st.plotly_chart(grade_chart, use_container_width=True)

# ------------------------------------
# 📆 Monthly Trend
# ------------------------------------
st.subheader("📈 Monthly Attendance Trend")
monthly_chart = px.line(
    filtered_df.groupby("Month")["Attendance_%"].mean().reset_index(),
    x="Month",
    y="Attendance_%",
    markers=True,
    title="Average Attendance per Month",
)
st.plotly_chart(monthly_chart, use_container_width=True)

# ------------------------------------
# 👩‍🏫 Student-level Table
# ------------------------------------
st.subheader("📋 Detailed Student Attendance")
st.dataframe(filtered_df.sort_values(by="Attendance_%", ascending=False))



# ------------------------------------
# 💾 Download as Excel (Fixed)
# ------------------------------------

st.subheader("⬇️ Export Data")

# Create a CSV download
csv = filtered_df.to_csv(index=False).encode("utf-8")
st.download_button(
    "💾 Download as CSV",
    data=csv,
    file_name="filtered_attendance.csv",
    mime="text/csv"
)

# Create an Excel download (correct way)
excel_buffer = BytesIO()
with pd.ExcelWriter(excel_buffer, engine="xlsxwriter") as writer:
    filtered_df.to_excel(writer, index=False, sheet_name="Attendance")

st.download_button(
    label="📘 Download as Excel",
    data=excel_buffer.getvalue(),
    file_name="filtered_attendance.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)


# last updated on Wed, Oct  8, 2025 12:35:39 AM
